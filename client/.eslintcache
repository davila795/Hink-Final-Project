[{"/home/carlos/ironhack/Hink-Final-Project/client/src/index.js":"1","/home/carlos/ironhack/Hink-Final-Project/client/src/components/App.js":"2","/home/carlos/ironhack/Hink-Final-Project/client/src/services/auth.service.js":"3","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/home/Home.js":"4","/home/carlos/ironhack/Hink-Final-Project/client/src/components/layout/Navbar/Navbar.js":"5","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/Login.js":"6","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/SignUp.js":"7","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/countryRegionFlag.js":"8","/home/carlos/ironhack/Hink-Final-Project/client/src/services/meetings.service.js":"9","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-form/New.js":"10","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-list/MeetingsList.js":"11","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-card/MeetingsCards.js":"12","/home/carlos/ironhack/Hink-Final-Project/client/src/services/user.service.js":"13","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-details/MeetingDetails.js":"14","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/user/user-profile/UserProfile.js":"15","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-edit/Edit.js":"16","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-filter/MeetingsFilter.js":"17","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-list/carousel/Carousel.js":"18","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentsList.js":"19","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentMessage.js":"20","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/FullCommentsComponent.js":"21","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentForm.js":"22","/home/carlos/ironhack/Hink-Final-Project/client/src/services/upload.service.js":"23","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/user/edit-profile/ProfileEdit.js":"24","/home/carlos/ironhack/Hink-Final-Project/client/src/components/map/MapForm.js":"25","/home/carlos/ironhack/Hink-Final-Project/client/src/components/map/EventDetailsMap.js":"26"},{"size":249,"mtime":1607938771487,"results":"27","hashOfConfig":"28"},{"size":2087,"mtime":1607878622940,"results":"29","hashOfConfig":"28"},{"size":478,"mtime":1607367858954,"results":"30","hashOfConfig":"28"},{"size":105,"mtime":1607686518182,"results":"31","hashOfConfig":"28"},{"size":2691,"mtime":1607651926882,"results":"32","hashOfConfig":"28"},{"size":1961,"mtime":1607652313142,"results":"33","hashOfConfig":"28"},{"size":5271,"mtime":1607867106766,"results":"34","hashOfConfig":"28"},{"size":1321,"mtime":1607636089072,"results":"35","hashOfConfig":"28"},{"size":893,"mtime":1607964232773,"results":"36","hashOfConfig":"28"},{"size":9279,"mtime":1607973200433,"results":"37","hashOfConfig":"28"},{"size":6386,"mtime":1608001868753,"results":"38","hashOfConfig":"28"},{"size":1049,"mtime":1607982633913,"results":"39","hashOfConfig":"28"},{"size":763,"mtime":1607424922777,"results":"40","hashOfConfig":"28"},{"size":6445,"mtime":1607960042203,"results":"41","hashOfConfig":"28"},{"size":4046,"mtime":1607878755960,"results":"42","hashOfConfig":"28"},{"size":6205,"mtime":1607960042263,"results":"43","hashOfConfig":"28"},{"size":7545,"mtime":1608001247143,"results":"44","hashOfConfig":"28"},{"size":771,"mtime":1607960042253,"results":"45","hashOfConfig":"28"},{"size":683,"mtime":1607803713958,"results":"46","hashOfConfig":"28"},{"size":637,"mtime":1607803690528,"results":"47","hashOfConfig":"28"},{"size":1828,"mtime":1607861872686,"results":"48","hashOfConfig":"28"},{"size":1791,"mtime":1607857094206,"results":"49","hashOfConfig":"28"},{"size":308,"mtime":1607861173766,"results":"50","hashOfConfig":"28"},{"size":4330,"mtime":1607878208450,"results":"51","hashOfConfig":"28"},{"size":8038,"mtime":1607962274673,"results":"52","hashOfConfig":"28"},{"size":1952,"mtime":1607959744093,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"pmr3n0",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},"/home/carlos/ironhack/Hink-Final-Project/client/src/index.js",[],["113","114"],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/App.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/services/auth.service.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/home/Home.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/layout/Navbar/Navbar.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/Login.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/SignUp.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/auth/countryRegionFlag.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/services/meetings.service.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-form/New.js",["115"],"import React, { Component } from 'react'\nimport MeetingService from '../../../../services/meetings.service'\nimport UploadService from '../../../../services/upload.service'\nimport { RegionDropdown } from 'react-country-region-selector'\nimport { Form, Button, Spinner, Row, Col } from 'react-bootstrap'\nimport logo from './021fe8a2-0a97-478b-a9d9-767e3055b732_200x200.png'\nimport Map from '../../../map/MapForm'\n\nclass MeetingForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            meeting: {\n                title: '',\n                description: '',\n                type: [],\n                latitude: undefined,\n                longitude: undefined,\n                address: '',\n                city: '',\n                owner: props.loggedUser._id,\n                date: undefined,\n                time: undefined,\n                image: undefined\n            },\n            uploadingActive: false\n        }\n        this.meetingService = new MeetingService()\n        this.uploadService = new UploadService()\n    }\n\n    handleInputChange = e => this.setState({ meeting: { ...this.state.meeting, [e.target.name]: e.target.value } })\n\n    handleTypeCheck = e => {\n\n        if (e.target.checked) {\n            this.setState({ meeting: { ...this.state.meeting, type: [...this.state.meeting.type, e.target.value] } })\n        } else {\n            const array = [...this.state.meeting.type]\n            const index = array.indexOf(e.target.value)\n            array.splice(index, 1)\n            this.setState({ meeting: { ...this.state.meeting, type: array } })\n        }\n    }\n\n    handleLocation = (latitude, longitude, address, city) => this.setState({ meeting: { ...this.state.meeting, latitude: latitude, longitude: longitude, address: address, city: city } })\n\n    handleSubmit = e => {\n        e.preventDefault()\n\n        this.meetingService\n            .saveMeeting(this.state.meeting)\n            .then(res => {\n                this.props.updateList()\n                this.props.closeModal()\n            })\n            .catch(err => console.log(err))\n    }\n\n    handleImageUpload = e => {\n\n        const uploadData = new FormData()\n        uploadData.append('imageUrl', e.target.files[0])\n\n        this.setState({ uploadingActive: true })\n\n        this.uploadService\n            .uploadImage(uploadData)\n            .then(response => {\n                this.setState({\n                    meeting: { ...this.state.meeting, image: response.data.secure_url },\n                    uploadingActive: false\n                })\n            })\n            .catch(err => console.log('ERRORRR!', err))\n    }\n\n    selectCity = val => {\n        this.setState({ meeting: { ...this.state.meeting, city: val } })\n    }\n\n\n    render() {\n\n        return (\n            <>\n                <h1>New Meeting</h1>\n                <hr />\n\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col md={6}>\n                            <Form.Group controlId=\"title\">\n                                <Form.Label>Title</Form.Label>\n                                <Form.Control type=\"text\" name=\"title\" value={this.state.meeting.title} onChange={this.handleInputChange} />\n                            </Form.Group>\n\n\n                            <Form.Group controlId=\"description\">\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control as='textarea' rows={3} name=\"description\" value={this.state.meeting.description} onChange={this.handleInputChange} />\n                            </Form.Group>\n                        </Col>\n                        <Col md={6}>\n                            <Form.Group controlId=\"date\">\n                                <Form.Label>Date</Form.Label>\n                                <Form.Control type=\"date\" name=\"date\" value={this.state.meeting.date} onChange={this.handleInputChange} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"time\">\n                                <Form.Label>Time</Form.Label>\n                                <Form.Control type=\"time\" name=\"time\" value={this.state.meeting.time} onChange={this.handleInputChange} />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Label>Type</Form.Label>\n                                <div className=\"mb-3\">\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Beers\"\n                                        value='Beers'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-1'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Party\"\n                                        value='Party'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-2'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Cultural\"\n                                        value='Cultural'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-3'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Languages\"\n                                        value='Languages'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-4'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Music\"\n                                        value='Music'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-5'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Sports\"\n                                        value='Sports'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-6'\n                                    />\n                                    <Form.Check\n                                        onChange={this.handleTypeCheck}\n                                        custom\n                                        inline\n                                        label=\"Other\"\n                                        value='Other'\n                                        type='checkbox'\n                                        id='custom-inline-checkbox-7'\n                                    />\n                                </div>\n                            </Form.Group>\n\n                        </Col>\n                        <Col>\n                            <Form.Group>\n                                <Form.Label>Image (file) {this.state.uploadingActive &&\n                                    <Spinner animation=\"grow\" role=\"status\">\n                                        <img src={logo} width='40px' className='App' alt=\"logo\" />\n                                    </Spinner>}\n                                </Form.Label>\n                                <Form.Control type=\"file\" onChange={this.handleImageUpload} />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n\n                    <Form.Group>\n                        <Map\n                            google={this.props.google}\n                            center={{ lat: 40.450620, lng: - 3.686573 }}\n                            height='300px'\n                            zoom={15}\n                            handleLocation={this.handleLocation}\n                        />\n                    </Form.Group>\n\n\n                    <Button variant=\"info\" type=\"submit\" disabled={this.state.uploadingActive}>{this.state.uploadingActive ? 'Uploading Image' : 'Create Meeting'}</Button>\n                </Form>\n            </>\n        )\n    }\n}\n\nexport default MeetingForm","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-list/MeetingsList.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-card/MeetingsCards.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/services/user.service.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-details/MeetingDetails.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/user/user-profile/UserProfile.js",["116"],"import React, { Component } from 'react'\nimport { Col, Container, Row, Button, Spinner, Modal, ModalTitle } from 'react-bootstrap'\nimport logo from './021fe8a2-0a97-478b-a9d9-767e3055b732_200x200.png'\nimport EditForm from '../edit-profile/ProfileEdit'\nimport UserService from '../../../../services/user.service'\nimport ReactCountryFlag from \"react-country-flag\"\nimport countryList from 'react-select-country-list'\nimport './UserProfile.css'\n\n\nclass Profile extends Component {\n    constructor() {\n        super()\n        this.state = {\n            user: undefined,\n            showModal: false\n        }\n        this.userService = new UserService()\n    }\n\n    componentDidMount = () => this.refreshUser()\n\n    refreshUser = () => {\n        this.userService\n            .getProfile(this.props.match.params.id)\n            .then(response => {\n                this.props.storeUser(response.data)\n                this.setState({ user: response.data })\n            })\n            .catch(err => console.log(err))\n    }\n\n    addContact = () => {\n        this.userService\n            .addContact(this.state.user._id)\n            .then(response => console.log(response.data))\n            .catch(err => console.log(err))\n    }\n\n    handleModal = visible => this.setState({ showModal: visible })\n\n    render() {\n        return (\n            <>\n                <Container className='user-profile'>\n                    {this.state.user\n                        ?\n                        <>\n                            <Row >\n                                <Col md={{ span: 4, offset: 1 }}>\n                                    <h1>User Profile ⤵</h1>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={{ span: 4, offset: 1 }} style={{ textAlign: 'center' }}>\n                                    <img className='profile-img' src={this.state.user.avatar} style={{ width: '100%' }} alt={this.state.user.username} />\n                                    <h4>{this.state.user.username}</h4>\n                                </Col>\n                                <Col md={6}>\n                                    <h3>{this.state.user.fullname}<ReactCountryFlag countryCode={countryList().getValue(this.state.user.origin)} svg style={{ marginLeft: '10px', width: '30px' }} /></h3>\n                                    <hr />\n\n                                    <p>{this.state.user.description}</p>\n                                    <p><strong>Actual city: </strong>{this.state.user.city}</p>\n                                    <p><strong>Origin: </strong>{this.state.user.origin}</p>\n                                    <p>Contact me at <strong>{this.state.user.email}</strong></p>\n                                    {this.props.loggedUser._id === this.state.user._id\n                                        ?\n                                        <Button variant='outline-dark' size='sm' onClick={() => this.handleModal(true)} >Edit Profile</Button>\n                                        :\n                                        <Button variant='outline-info' size='sm' onClick={this.addContact}>Add Contact</Button>\n                                    }\n\n                                </Col>\n                            </Row>\n                        </>\n\n                        :\n                        <Spinner animation=\"grow\" role=\"status\">\n                            <img src={logo} width='40px' className='App' alt=\"logo\" />\n                        </Spinner>\n                    }\n                </Container >\n\n                <Modal show={this.state.showModal} onHide={() => this.handleModal(false)}>\n                    <Modal.Title>Edit Profile</Modal.Title>\n                    <Modal.Body>\n                        <EditForm closeModal={() => this.handleModal(false)} updateUser={this.refreshUser} user={this.state.user} />\n                    </Modal.Body>\n                </Modal>\n            </>\n        )\n    }\n\n}\n\nexport default Profile","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-edit/Edit.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-filter/MeetingsFilter.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-list/carousel/Carousel.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentsList.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentMessage.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/FullCommentsComponent.js",["117"],"import { Link } from 'react-router-dom'\nimport logo from './021fe8a2-0a97-478b-a9d9-767e3055b732_200x200.png'\nimport { Spinner, Col, Row } from 'react-bootstrap'\nimport CommentList from './CommentsList'\nimport CommentForm from './CommentForm'\n\nexport default (props) => {\n\n    return (\n        <>\n            {props.comments\n                ?\n                <div className=\"bg-light shadow\">\n                    <Row>\n                        <Col md={{ offset: 1 }}>\n                            <header>\n                                <h5>\n                                    Comments\n                                <span className=\"px-2\" role=\"img\" aria-label=\"Chat\">💬</span>\n                                </h5>\n                            </header>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={{ span: 4, offset: 1 }} className=\"pt-3 border-right\">\n                            <p>Say something about this meeting</p>\n                            {props.loggedUser ?\n                                <CommentForm loggedUser={props.loggedUser} meetingId={props.meetingId} updateMeeting={props.updateMeeting} />\n                                :\n                                <Link to='/login' className='btn btn-info btn-sm'>Log in first</Link>\n                            }\n                        </Col>\n                        <Col md={{ span: 7 }} className=\"pt-3 bg-white\">\n                            <CommentList comments={props.comments} />\n                        </Col>\n                    </Row>\n\n                </div>\n                :\n                <Spinner animation=\"grow\" role=\"status\">\n                    <img src={logo} width='40px' className='App' alt=\"logo\" />\n                </Spinner>\n            }\n        </>\n    );\n\n}","/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/meetings/meetings-comments/CommentForm.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/services/upload.service.js",[],"/home/carlos/ironhack/Hink-Final-Project/client/src/components/pages/user/edit-profile/ProfileEdit.js",["118","119","120"],"import React, { Component } from 'react'\nimport UserService from '../../../../services/user.service'\nimport UploadService from '../../../../services/upload.service'\nimport CountrySelection from '../../auth/countryRegionFlag'\nimport { Spinner } from 'react-bootstrap'\nimport logo from './021fe8a2-0a97-478b-a9d9-767e3055b732_200x200.png'\n\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\n\nclass EditForm extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user: {\n                username: props.user.username,\n                email: props.user.email,\n                origin: props.user.origin,\n                city: props.user.city,\n                age: props.user.age,\n                fullname: props.user.fullname,\n                description: props.user.description,\n                avatar: props.user.avatar\n            },\n            uploadingActive: false\n        }\n        this.userService = new UserService()\n        this.uploadService = new UploadService()\n\n    }\n\n    handleInputChange = e => this.setState({ user: { ...this.state.user, [e.target.name]: e.target.value } })\n\n    handleSubmit = e => {\n\n        e.preventDefault()\n\n        this.userService\n            .editProfile(this.state.user)\n            .then(user => {\n                this.props.updateUser()\n                this.props.closeModal()\n            })\n            .catch(err => console.log('There was an error:', err.response.data.Message))\n    }\n\n    handleImageUpload = e => {\n\n        const uploadData = new FormData()\n        uploadData.append('imageUrl', e.target.files[0])\n\n        this.setState({ uploadingActive: true })\n\n        this.uploadService\n            .uploadImage(uploadData)\n            .then(response => {\n                this.setState({\n                    user: { ...this.state.user, avatar: response.data.secure_url },\n                    uploadingActive: false\n                })\n            })\n            .catch(err => console.log('ERRORRR!', err))\n    }\n\n    setCountryCity = ({ country, city }) => {\n        this.setState({ user: { ...this.state.user, origin: country, city: city } })\n    }\n\n\n    render() {\n\n        return (\n\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"fullname\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" name=\"fullname\" value={this.state.user.fullname} onChange={this.handleInputChange} />\n                </Form.Group>\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" name=\"username\" value={this.state.user.username} onChange={this.handleInputChange} />\n                </Form.Group>\n                <Form.Group controlId=\"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control type=\"email\" name=\"email\" value={this.state.user.email} onChange={this.handleInputChange} />\n                </Form.Group>\n                <Form.Group controlId=\"age\">\n                    <Form.Label>Age</Form.Label>\n                    <Form.Control type=\"number\" name=\"age\" value={this.state.user.age} onChange={this.handleInputChange} />\n                </Form.Group>\n                <CountrySelection setCountryCity={this.setCountryCity} /><br></br>\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Tell us something about you:</Form.Label>\n                    <Form.Control as='textarea' rows={3} name=\"description\" value={this.state.user.description} onChange={this.handleInputChange} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Image (file) {this.state.uploadingActive &&\n                        <Spinner animation=\"grow\" role=\"status\">\n                            <img src={logo} width='40px' className='App' alt=\"logo\" />\n                        </Spinner>}\n                    </Form.Label>\n                    <Form.Control type=\"file\" onChange={this.handleImageUpload} />\n                </Form.Group>\n                <Button variant=\"info\" type=\"submit\" disabled={this.state.uploadingActive}>{this.state.uploadingActive ? 'Uploading Image' : 'Save'}</Button>\n            </Form>\n        )\n    }\n}\n\nexport default EditForm","/home/carlos/ironhack/Hink-Final-Project/client/src/components/map/MapForm.js",["121","122"],"import React, { Component } from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\"\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\"\n\nGeocode.setApiKey('AIzaSyDX4qOmtQlNAai9C4l2e7OldXNZqZey-fE');\nGeocode.enableDebug();\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        }\n    }\n    /**\n      * Get the current address from the default map position and set those values in the state\n      */\n    componentDidMount() {\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray)\n                this.setState({\n                    address: (address) ? address : '',\n                    city: (city) ? city : '',\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    /**\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n      *\n      * @param nextProps\n      * @param nextState\n      * @return {boolean}\n      */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city\n        ) {\n            return true\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false\n        }\n    }\n    /**\n      * Get the city and set the city input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    /**\n      * When the marker is dragged you get the lat and long using the functions available from event object.\n      * Use geocode to get the address, city, area and state from the lat and lng positions.\n      * And then set those values in the state.\n      *\n      * @param event\n      */\n    onMarkerDragEnd = (event) => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng(),\n            addressArray = [];\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    city: (city) ? city : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    }\n                })\n                this.props.handleLocation(newLat, newLng, address, city)\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    /**\n * When the user types an address in the search box\n * @param place\n */\n    onPlaceSelected = (place) => {\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n        \n        this.setState({\n            address: (address) ? address : '',\n            city: (city) ? city : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            }\n        })\n        this.props.handleLocation(latValue, lngValue, address, city)\n    };\n\n\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                () => (\n                    <GoogleMap google={this.props.google}\n                        defaultZoom={this.props.zoom}\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* For Auto complete Search Box */}\n                        <Autocomplete\n                            style={{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottom: '100px'\n                            }}\n                            onPlaceSelected={place => this.onPlaceSelected(place)}\n                            types={['(regions)']}\n                            componentRestrictions={{ country: \"es\" }}\n                        />\n\n                        {/* InfoWindow on top of marker */}\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                            </div>\n                        </InfoWindow>\n\n                        {/*Marker*/}\n                        <Marker google={this.props.google}\n                            name={'Dolores park'}\n                            draggable={true}\n                            onDragEnd={this.onMarkerDragEnd}\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <Marker />\n                    </GoogleMap>\n                )\n            )\n        );\n        let map;\n        {\n            this.props.center.lat\n                ?\n                map = <div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">City</label>\n                        <input type=\"text\" name=\"city\" className=\"form-control\" readOnly=\"readOnly\" value={this.state.city} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"\">Address</label>\n                        <input type=\"text\" name=\"address\" className=\"form-control\" readOnly=\"readOnly\" value={this.state.address} />\n                    </div>\n\n                    <AsyncMap\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDX4qOmtQlNAai9C4l2e7OldXNZqZey-fE&libraries=places\"\n                        loadingElement={\n                            <div style={{ height: `100%` }} />\n                        }\n                        containerElement={\n                            <div style={{ height: this.props.height }} />\n                        }\n                        mapElement={\n                            <div style={{ height: `100%` }} />\n                        }\n                    />\n                </div>\n                :\n                map = <div style={{ height: this.props.height }} />\n        }\n        return (map)\n    }\n}\nexport default Map","/home/carlos/ironhack/Hink-Final-Project/client/src/components/map/EventDetailsMap.js",["123","124"],"import { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\"\nimport Geocode from \"react-geocode\"\n\nGeocode.setApiKey('AIzaSyDX4qOmtQlNAai9C4l2e7OldXNZqZey-fE');\nGeocode.enableDebug();\n\nexport default props => {\n    console.log(props)\n    const AsyncMap = withScriptjs(\n        withGoogleMap(\n            () => (\n                <GoogleMap google={props.google}\n                    defaultZoom={props.zoom}\n                    defaultCenter={{ lat: props.coordinates[0], lng: props.coordinates[1] }}\n                >\n                    {/* InfoWindow on top of marker */}\n                    <InfoWindow\n                        position={{ lat: (props.coordinates[0] + 0.0018), lng: props.coordinates[1] }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>{props.address}</span>\n                        </div>\n                    </InfoWindow>\n\n                    {/*Marker*/}\n                    <Marker google={props.google}\n                        name={'Dolores park'}\n                        position={{ lat: props.coordinates[0], lng: props.coordinates[1] }}\n                    />\n                    <Marker />\n                </GoogleMap>\n            )\n        )\n    );\n    let map;\n    {\n        props.coordinates\n            ?\n            map =\n            <AsyncMap\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDX4qOmtQlNAai9C4l2e7OldXNZqZey-fE&libraries=places\"\n                loadingElement={\n                    <div style={{ height: `100%` }} />\n                }\n                containerElement={\n                    <div style={{ height: props.height }} />\n                }\n                mapElement={\n                    <div style={{ height: `100%` }} />\n                }\n            />\n            :\n            map = <div style={{ height: props.height }} />\n    }\n    return (map)\n}\n\n",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":24},{"ruleId":"129","severity":1,"message":"133","line":2,"column":55,"nodeType":"131","messageId":"132","endLine":2,"endColumn":65},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":48,"endColumn":2},{"ruleId":"129","severity":1,"message":"137","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":19},{"ruleId":"129","severity":1,"message":"138","line":8,"column":21,"nodeType":"131","messageId":"132","endLine":8,"endColumn":24},{"ruleId":"129","severity":1,"message":"139","line":8,"column":26,"nodeType":"131","messageId":"132","endLine":8,"endColumn":29},{"ruleId":"129","severity":1,"message":"140","line":88,"column":13,"nodeType":"131","messageId":"132","endLine":88,"endColumn":25},{"ruleId":"141","severity":1,"message":"142","line":186,"column":9,"nodeType":"143","messageId":"144","endLine":214,"endColumn":10},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":56,"endColumn":2},{"ruleId":"141","severity":1,"message":"142","line":36,"column":5,"nodeType":"143","messageId":"144","endLine":54,"endColumn":6},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'RegionDropdown' is defined but never used.","Identifier","unusedVar","'ModalTitle' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'addressArray' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]